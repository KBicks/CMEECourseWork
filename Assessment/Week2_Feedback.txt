Starting weekly assessment for Katherine, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 4.24 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week5, Week2, Week9, Week4, .git, Miniproject, Week3, Project

Found the following files in parent directory: .gitignore, readme.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
*.pcy
__pycache__
*.Rhistory
*.gz
*.aux
*.log
*.blg
*.bbl
**********************************************************************

Found README in parent directory, named: readme.md

Printing contents of readme.md:
**********************************************************************
### CMEE Coursework Repository 2018/19 README
  
*Author:* Katie Bickerton
  
*Contents:*  
**Week{1-9}** - exercises from the taught content of the course.  
**Miniproject** - script and data files for the CMEE mini-project, (this is also the week 8 directory).  
**Project** - script and data files for the 9 month research project.  
**Assessment** - feedback on the taught content from the assessor.  
**.gitignore** - file types within the home directory but not kept under version control.  **********************************************************************

======================================================================
Looking for the weekly directories...

Found 8 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7, Week9

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: readme.md

Checking for readme file in weekly directory...

Found README in parent directory, named: readme.md

Printing contents of readme.md:
**********************************************************************
### CMEE Coursework Week 2 README

*Introduction:* This directory contains coursework files from week 2 of the CMEE course. This week included an introduction to python, and applications described in the scripts below.
  
    
*Contents:* There are four directories:
1. **Code** - script files in python.
2. **Data** - data used to test script files and referred to within some scripts.
3. **Results** - location for output files produced by script files.
4. **Sandbox** - practise and test files.
  
  
*Code File Descriptions:*  
Biological computing in Python 1:  
**basic_io.py** - Demonstrates inputing text files into python: File Input prints first every line in a file, then every line apart from blank lines, File Output generates a list of a specified range, then saves it with each element on a new line, Storing Files using the pickle module.  
**basic_csv.py** - Reads and prints a csv file, then writes specified components of the csv to a new csv.  
**boilerplate.py** - Boilerplate script to demonstrate how to write functions in python.  
**using_name.py** - Demonstration of using __name__==__"main"__ to write a program that can run itself, and be imported by another module.  
**sysargv.py** - Using module sys, gives name, number of arguments and lists arguments of a script.  
**scope.py** - Demonstrates that global variables appear outside the function, whereas variables set inside the function do not alter variables outside the function.  
**control_flow,py** - Demonstrating the use of control statements.  
**cfexercises1.py** - Demonstration of different control functions.  
**loops.py** - Demonstration of for loops and while loops.  
**oaks.py** - Demonstrates how list for loops and list comprehensions can be used for the same tasks - outputing oak species from list and changing output to upper case.  
**test_control_flow.py** - Functions exemplifying the use of control statements.  
**debugme.py** - Code with error to practise debugging.  
  
Biological computing in Python 1 Practicals:  
**cfexercises2.py** - Demonstrates definition of functions using if statements and for loops, includes test values.  
**lc1.py** - Exemplifies use of list comprehensions and conventional loops to subset information from a list.  
**lc2.py** - Exemplifies use of list comprehensions and for loops to manipulate tuples.  
**dictionary.py** - Populate a dictionary with order as the key, and each species sorted into order.  
**tuple.py** - Print each tuple on a separate line.  
**align_seqs.py** - Ouput the two DNA sequences with the highest number of matches, with their number of matches, from a csv.  
**oaks_debugme.py** - Finds oak species from a csv file and output these into a new csv file of oak species only.  
**********************************************************************

Found following files in results directory: readme.md...

Found 19 code files: lc2.py, boilerplate.py, basic_csv.py, cfexercises2.py, dictionary.py, debugme.py, scope.py, cfexercises1.py, tuple.py, basic_io.py, lc1.py, oaks_debugme.py, oaks.py, loops.py, using_name.py, align_seqs.py, sysargv.py, control_flow.py, test_control_flow.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file lc2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Exemplifies use of list comprehensions and for loops to manipulate tuples."""
__appname__ = "lc2.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "12-Oct-2018"

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

### Questions

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

### Answers

## (1) List comprehension - list of month,rainfall tuples where rain > 100mm

# selects tuples where rainfall is greater than 100
def over100(name):
    """Returns data points that are greater than 100."""
    return name[1]>100

greaterthan100_lc = set([month for month in rainfall if over100(month)])
print(greaterthan100_lc)

## (2) List comprehension - list of months where rain < 50mm

# selects months only where rainfall is less than 50mm 
def under50(name):
    """Selects and outputs data points less than 50."""
    return name[1]<50

lessthan50_lc = set([month[0] for month in rainfall if under50(month)])
print(lessthan50_lc)

## (3) 
## Conventional loop for part (1) - create a list of month,rainfall tuples with
# amount of rain > 100mm

def over100(name):
    """Returns data points that are greater than 100."""
    return name[1]>100

# set to input results
greaterthan100_loop = set()
for month in rainfall:
    if over100(month):
       # if statement only includes values that fit function defined above
        greaterthan100_loop.add(month)
print(greaterthan100_loop)

## Conventional loop for part (2) - create a list of months where rain < 50mm

def under50(name):
    """Selects and outputs data points less than 50."""
    return name[1]<50

lessthan50_loop = set()
for month in rainfall:
    if under50(month):
        lessthan50_loop.add(month[0])
print(lessthan50_loop)**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
{('DEC', 142.2), ('NOV', 128.4), ('FEB', 126.1), ('JAN', 111.4), ('AUG', 140.2)}
{'MAR', 'SEP'}
{('DEC', 142.2), ('NOV', 128.4), ('FEB', 126.1), ('JAN', 111.4), ('AUG', 140.2)}
{'MAR', 'SEP'}

**********************************************************************

Code ran without errors

Time consumed = 0.05302s

======================================================================
Inspecting script file boilerplate.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Boilerplate script to demonstrate how to write functions in python."""
__appname__ = "boilerplate.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "09-Oct-2018"

## imports ##
import sys # module to interface program with operating system

## constants ##

## functions ##
def main(argv):
    """Main entry point of the program """
    print('This is a boilerplate')
    return 0 #success failure codes - 0 means it has worked

if __name__ == "__main__": #allows file to be run as script and imported 
    #- programme runs itself instead of requiring another module
    """Makes sure the "main" function is called from the command line"""
    status = main(sys.argv) #if above statement is true, outputs definition
    sys.exit(status) #gives the status upon exit - 0 if successful**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.03783s

======================================================================
Inspecting script file basic_csv.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Reads and prints a csv file, then writes specified components of the csv
to a new csv."""
__appname__ = "basic_csv.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "09-Oct-2018"

# module dealing with csv files
import csv

# Read a file containing:
# 'Species','Infrairder','Family','Distribution','Body mass'
f = open('../Data/testcsv.csv','r')

# Sets csv file to be read
csvread = csv.reader(f)
# Creates a temporary list for outputs
temp = []
for row in csvread:
    # Adds each row of the input to the temp output file as a tuple, then prints
    temp.append(tuple(row))
    print(row)
    # prints string then the first entry of each row (indexed as 0)
    print("The species is", row[0])

f.close()

# write a file containing only species name and Body mass

# opens testcsv.csv as a file to be read and set to variable f
f = open('../Data/testcsv.csv','r')
# opens bodymass.csv as a file to be written and set to variable g
g = open('../Results/bodymass.csv', 'w')

# set variables to each csv
csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
    # print each row in read csv
    print(row)
    # write the 1st and 5th entries from each row (indexing starts at 0) into the write csv
    csvwrite.writerow([row[0], row[4]])

# close both files
f.close()
g.close()**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.03418s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Demonstrates definition of functions using if statements and for loops,
includes test values."""
__appname__ = "cfexercises2.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "11-Oct-2018"

# module interfacing this program with the operating system
import sys

# defining a function which squareroots a variable
def foo1(x):
    """foo1 square roots variable x.""" 
    return x ** 0.5

# defining a function which compares the size of two variables
def foo2(x, y):
    """foo2 compares and outputs the larger two variables"""
    if x > y:
        return x
    return y

# rearranges order of three variables using if statements
def foo3(x, y, z):
    """foo3 compares three input variables, alters positions based upon relative values, 
    and returns new arangement of variables"""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

# calculates the factorial of x using a for loop
def foo4(x):
    """foo4 gives factorial of x."""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

# gives factorial
def foo5(x): #where x = 10, the function will give 10!
    """foo5 returns factorial of input value using a recursive function"""
    if x == 1:
        return 1
    return x * foo5(x - 1)

# non recursive factorial using while statements
def foo6(x):
    """foo6 also returns factorial of variable, using a non-recursive function."""
    facto = 1
    while x>=1:
        facto = facto * x
        x = x - 1
    return facto

# test values for the functions defined 
def main(argv):
    """Tests functions."""
    print(foo1(16))
    print(foo2(5,6))
    print(foo3(3,5,1))
    print(foo4(4))
    print(foo5(4))
    print(foo6(4))
    return 0

if (__name__ == "__main__"):
    # exit once status reaches main argument
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
4.0
6
[3, 1, 5]
24
24
24

**********************************************************************

Code ran without errors

Time consumed = 0.03492s

======================================================================
Inspecting script file dictionary.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Populate a dictionary with order as the key, and each species sorted
into order."""
__appname__ = "dictionary.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "12-Oct-2018"

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

### Question
# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa. 
# E.g. 'Chiroptera' : set(['Myotis lucifugus']) etc. 

### Answer

# create dictionary with key set as the order - with an empty set being created 
# for each order
taxadict = {order[1] : set() for order in taxa}
# for each row, add species to each order
for order in taxa:
        taxadict[order[1]].add(order[0])
print(taxadict)**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
{'Chiroptera': {'Myotis lucifugus'}, 'Afrosoricida': {'Microgale talazaci', 'Microgale dobsoni'}, 'Carnivora': {'Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus'}, 'Rodentia': {'Mus domesticus', 'Cleithrionomys rutilus', 'Gerbillus henleyi', 'Peromyscus crinitus'}}

**********************************************************************

Code ran without errors

Time consumed = 0.02526s

======================================================================
Inspecting script file debugme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Code with error to practise debugging."""
__appname__ = "debugme.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "13-Oct-2018"


def createabug(x):
    """Simple division - with bug, to test debugging."""
    y = x**4
    z = 0
    y = y/z
    return y

# run function
createabug(25)**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "debugme.py", line 17, in <module>
    createabug(25)
  File "debugme.py", line 13, in createabug
    y = y/z
ZeroDivisionError: division by zero

======================================================================
Inspecting script file scope.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Demonstrates that global variables appear outside the function, whereas
variables set inside the function do not alter variables outside the function."""
__appname__ = "scope.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "10-Oct-2018"

# Part 1
# set value of variables
_a_global = 10

# Define a function
def a_function():
    # set values of variables
    _a_global = 5
    _a_local = 4
    # outputs values of variables
    print("Inside the function, the value is ", _a_global)
    print("Inside the function, the value is ", _a_local)
    return None

a_function()

# gives value of variable outside the function
print("Outside the function, the value is ", _a_global)

#Part 2
_a_global = 10

def a_function():
    # use of function global means variable is then used and outside the function
    global _a_global 
    _a_global = 5
    _a_local = 4
    print("Inside the function, the value is ", _a_global)
    print("Inside the function, the value is ", _a_local)
    return None

a_function()
# global variables are able to overwrite variables outside the function
print("Outside the function, the value is", _a_global)

#avoid assigning global variables because it can cause name conflicts across multiple scripts**********************************************************************

Testing scope.py...

scope.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Inside the function, the value is  5
Inside the function, the value is  4
Outside the function, the value is  10
Inside the function, the value is  5
Inside the function, the value is  4
Outside the function, the value is 5

**********************************************************************

Code ran without errors

Time consumed = 0.02636s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Demonstration of different control functions."""
__appname__ = "cfexercises1.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "11-Oct-2018"

for i in range(3, 17): #prints hello for every i in range
    print("hello")

for j in range(12): #prints hello for every j in range which is divisible by 3
    if j % 3 == 0:
        print("hello")

for j in range(15): #prints hello for every j in range that is divisible by either 5 or 4 and gives a remainder of 3
    if j % 5 == 3:
        print("hello")
    elif j % 4 == 3:
        print("hello")

z = 0
while z != 15: #for values of z not equal to 15, print hello
    print("hello")
    z = z + 3

z = 12
while z < 100: #print hello for values that fulfil parameters of z and k 
    if z == 31:
        for k in range(7):
            print("hello")
    elif z == 18: #else if, print hello if these parameters are met
        print("hello")
    z = z + 1 #run through values of z from starting value to constraints of function**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.03168s

======================================================================
Inspecting script file tuple.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Print each tuple on a separate line."""
__appname__ = "tuple.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "12-Oct-2018"

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

### Question
# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# Hints: use the "print" command! You can use list comprehensions!

### Answer
for species in birds:
# print subsets of the tuples to create separate lines
  print(species[0] + ',' + species[1] + ',' + str(species[2]))**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Passerculus sandwichensis,Savannah sparrow,18.7
Delichon urbica,House martin,19
Junco phaeonotus,Yellow-eyed junco,19.5
Junco hyemalis,Dark-eyed junco,19.6
Tachycineata bicolor,Tree swallow,20.2

**********************************************************************

Code ran without errors

Time consumed = 0.03066s

======================================================================
Inspecting script file basic_io.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Demonstrates inputing text files into python: 
File Input prints first every line in a file, then every line apart from blank lines,
File Output generates a list of a specified range, then saves it with each element on a new line,
Storing Files using the pickle module."""
__appname__ = "basic_io.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "09-Oct-2018"

##############
# FILE INPUT
##############
# Open a file for reading 
f = open('../Sandbox/test.txt','r') #r is to read txt
# use "implicit" for loop
# if the object is a file, python will cycle over lines
# prints each line of input file
for line in f:
    print(line)

#close the file
f.close()


# Same example, skip blank lines
f = open('../Sandbox/test.txt','r')
for line in f:
    # removes blank lines by looking for lines (after stripping trailing spaces) which have lengths > 0
    # only lines that fulfil this condition are printed
    if len(line.strip()) > 0:
        print(line)

f.close()

###############
# FILE OUTPUT
###############
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../Sandbox/testout.txt','w')
# for each element of the list, print in file specified above and add a new line per element
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()

################
# STORING OBJECTS
################
# To save an object (even complex) for later use
# Create a dictionary 
my_dictionary = {"a key": 10, "another key": 11}

import pickle
#module that allows saving from RAM to hard disk

f = open('../Sandbox/testp.p','wb') ## note the b: accept binary files
# stores dictionary
pickle.dump(my_dictionary, f) 
f.close()

##Load the data again
f = open('../Sandbox/testp.p','rb')
#loads stored dictionary 
another_dictionary = pickle.load(f) 
f.close()

print(another_dictionary)**********************************************************************

Testing basic_io.py...

basic_io.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
First Line

second Line



Third Line



Fourth Line

First Line

second Line

Third Line

Fourth Line

{'another key': 11, 'a key': 10}

**********************************************************************

Code ran without errors

Time consumed = 0.03231s

======================================================================
Inspecting script file lc1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Exemplifies use of list comprehensions and conventional loops to subset
information from a list."""
__appname__ = "lc1.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "11-Oct-2018"

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

### Questions:
#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 


### Answers:

## (1) List comprehensions

# List of latin names of bird species
latinname_lc = set([species[0] for species in birds])
print(latinname_lc)

# List of common names of bird species
commonname_lc = set([species[1] for species in birds])
print(commonname_lc)

# List of mean body masses of bird species
meanbodymass_lc = set([species[2] for species in birds])
print(meanbodymass_lc)



## (2) Conventional loop method

# List of latin names of bird species
latinname_loop = set()
for species in birds:
        latinname_loop.add(species[0])
print(latinname_loop)

# List of common names of bird species
commonname_loop = set()
for species in birds:
        commonname_loop.add(species[1])
print(commonname_loop)

# List of mean body masses of bird species
meanbodymass_loop = set()
for species in birds:
        meanbodymass_loop.add(species[2])
print(meanbodymass_loop)
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
{'Delichon urbica', 'Tachycineata bicolor', 'Junco phaeonotus', 'Junco hyemalis', 'Passerculus sandwichensis'}
{'House martin', 'Dark-eyed junco', 'Savannah sparrow', 'Tree swallow', 'Yellow-eyed junco'}
{19.5, 19.6, 18.7, 19, 20.2}
{'Delichon urbica', 'Tachycineata bicolor', 'Junco phaeonotus', 'Junco hyemalis', 'Passerculus sandwichensis'}
{'House martin', 'Dark-eyed junco', 'Savannah sparrow', 'Tree swallow', 'Yellow-eyed junco'}
{19.5, 19.6, 18.7, 19, 20.2}

**********************************************************************

Code ran without errors

Time consumed = 0.02716s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Finds oak species from a csv file and output these into a new csv file of oak
species only."""
__appname__ = "oaks_debugme.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "14-Oct-2018"

# required modules
import csv
import sys
import doctest

#Define function searching for oak species
def is_an_oak(name):
    # doctest to check expected results are output
    """ Returns True if name is starts with 'quercus', the genus for oaks
    
    >>> is_an_oak("Quercus test")
    True
    >>> is_an_oak("Fagus sylvatica")
    False
    >>> is_an_oak("Quercuss test") 
    False
    """

    # sets name to lower case, splits each word into a separate section, 
    # extracts first element of each 
    name = name.lower().split()[0]
    # checks length of name, if not 7 (the length of quercus), rejects
    if len(name) != 7:
        return False
    return name == "quercus"
    

def main(argv):
    """Searches for oak species with input csv file, outputs oak species into
    a new csv. Prints output showing oak species found.""" 
    # set f as input file and g as output file
    f = open('../Data/TestOaksData.csv','r')
    g = open('../Results/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    # create an empty set for oaks to populate
    oaks = set()
    #for each row in input, print the genus, then if it is an oak
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            #if is an oak, writes it to csv
            csvwrite.writerow([row[0], row[1]])    

    #runs doctests and checks against outputs from function
    doctest.testmod()

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.06650s

======================================================================
Inspecting script file oaks.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Demonstrates how list for loops and list comprehensions can be used for
the same tasks - outputing oak species from list and changing output to upper
case."""
__appname__ = "oaks.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "11-Oct-2018"


taxa = ["Quercus robur",
        "Fraxinus excelsior",
        "Pinus sylvestris",
        "Quercus cerris",
        "Quercus petraea",
        ]

def is_an_oak(name):
    """Searches for oak genus and returns in lower case."""
    return name.lower().startswith("quercus ")

###Two methods for ouputing oak species in list:
##Using for loops
oaks_loops = set()
# for all species in data 
for species in taxa:
    if is_an_oak(species):
            # add oaks to set
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions
# always uses [] as is a list
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Two methods for converting species names to upper case
#Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
{'Quercus petraea', 'Quercus robur', 'Quercus cerris'}
{'Quercus petraea', 'Quercus robur', 'Quercus cerris'}
{'QUERCUS CERRIS', 'QUERCUS PETRAEA', 'QUERCUS ROBUR'}
{'QUERCUS CERRIS', 'QUERCUS PETRAEA', 'QUERCUS ROBUR'}

**********************************************************************

Code ran without errors

Time consumed = 0.03280s

======================================================================
Inspecting script file loops.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Demonstration of for loops and while loops."""
__appname__ = "loops.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "11-Oct-2018"

#FOR loops in Python
# Prints values of i up to range specified 
for i in range(5): 
    print(i)

# Prints each element of list
my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

# prints addition of running totals to a list - recursively 
total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

#WHILE loops in Python
# Prints z values, increasing until specified value 
z = 0
while z < 100:
    z = z + 1
    print(z)

# Infinite loop that prints until b is FALSE
b = True
while b:
    print("GERONIMO! Infinite loop! ctrl+c to stop!")**********************************************************************

Testing loops.py...

loops.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! Infinite loop! ctrl+c to stop!
GERONIMO! Infinite loop! ctrl+c to stop!
GERONIMO! Infinite loop! ctrl+c to stop!
GERONIMO! Infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.25812s

======================================================================
Inspecting script file using_name.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Demonstration of using __name__==__"main"__ to write a program that can
run itself, and be imported by another module."""
__appname__ = "using_name.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "10-Oct-2018"

if __name__ == '__main__':
    """Checks if the programe is being run by itself or imported."""
    print('This program is being run by itself')
    # if run, will output that the program runs itself
else:
    print('I am being imported from another module')
    # if imported, will state that another module is importing the program**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This program is being run by itself

**********************************************************************

Code ran without errors

Time consumed = 0.07390s

======================================================================
Inspecting script file align_seqs.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Ouput the two DNA sequences with the highest number of matches, with their
number of matches, from a csv."""
__appname__ = "align_seqs.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "14-Oct-2018"

import sys
#import csv module to allow csv files to be read/written
import csv

#reads csv
with open('../Data/seqs.csv','r') as f:
    csvread = csv.reader(f)
    # create a list of sequences
    sourcedata = [x[0] for x in csvread]

#set the two sequences required 
seq1 = sourcedata[0]
seq2 = sourcedata[1]
# # Two example sequences to match

## If inputting sequences manually:
    #seq2 = "ATCGCCGGATTACGGG"
    #seq1 = "CAATTCGGAT"

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

# calculates length of both sequences
l1 = len(seq1)
l2 = len(seq2)
# finds the longer sequence and assigns to s1
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    """Computes number of matches and returns score based on matches."""
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        #moves shorter sequence along longer, counting number of matches in
        #each position
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # gives an output for each startpoint showing the number of matches where
    # * is a match and - is no match, position of the two sequences relative to
    # each other, and the number of matches for that startpoint.
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
# setting start values:
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        # best align is position of starting point of s2 relative to s1, with the most matches
        my_best_align = "." * i + s2
        my_best_score = z 
print(my_best_align)
print(s1)
print("Best score:", my_best_score)
# create an output string of alignment, sequence and best score
outstr = "{}\n{}\nBest score: {}".format(my_best_align, s1, my_best_score)
# write string to text file
with open("../Results/best_score.txt", "w") as f:
    f.write(outstr)**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........--*---*
.........CAATTCGGAT
ATCGCCGG
**********************************************************************

Code ran without errors

Time consumed = 0.05126s

======================================================================
Inspecting script file sysargv.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Using module sys, gives name, number of arguments and lists arguments 
of a script."""
__appname__ = "sysargv.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "10-Oct-2018"

# import module sys
import sys

# prints file name of the script
print("This is the name of the script: ", sys.argv[0])
# gives length of arguments used (i.e. number of arguments in script)
print("Number of arguments: ", len(sys.argv))
# lists arguments in script, including any input during running
print("The arguments are: " , str(sys.argv))**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.02461s

======================================================================
Inspecting script file control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Demonstrating the use of control statements."""
__appname__ = "control_flow.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "11-Oct-2018"

import sys

def even_or_odd(x=0): #if not specified x will = 0
    """Find whether a number x is even or odd."""
    if x % 2 == 0: # % is remainder function
        # % here returns value as x - place holder %d better than just x as returns a string
        return "%d is Even!" % x #if true will return even
    return "%d is Odd!" % x #if not true, will return odd

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    # if else statements to find largest divisor between 2-5 of a variable
    largest = 0
    if x % 5 == 0:
        largest = 5
    #tests variable starting with base case scenario, if not true, uses else if statments (elif)
    elif x % 4 == 0:
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: #final option - just else, no other alternatives 
        return "No divisor found for %d!" % x
    return "The largest divisor of %d is %d" % (x,largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2,x): # within range determine whether prime
        if x % i == 0:
            # if divisor is found, state not prime and divisor
            print("%d is not a prime: %d is a divisor" % (x,i))

            return False
    print("%d is a prime" % x) # % x is the modular operator 
    return True

def find_all_primes(x=22):
    """Find all the primes up to x"""
    #empty list to insert outputs
    allprimes = []
    for i in range(2, x+1):
        if is_prime(i):
            #if prime, add to allprimes list
            allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes

def main(argv):
    """tests the statements below to check script gives desired output"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    # exit once status reaches main argument
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime
True
2 is a prime
3 is a prime
4 is not a prime: 2 is a divisor
5 is a prime
6 is not a prime: 2 is a divisor
7 is a prime
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime
12 is not a prime: 2 is a divisor
13 is a prime
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is not a p
**********************************************************************

Code ran without errors

Time consumed = 0.02687s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
"""Functions exemplifying the use of control statements."""
__appname__ = "test_control_flow.py"
__author__ = "Katie Bickerton <k.bickerton18@imperial.ac.uk>"
__version__ = "3.5.2"
__date__ = "12-Oct-2018"

import sys
#module for testing functions
import doctest

def even_or_odd(x=0): #if not specified x will = 0
    """Find whether a number x is even or odd.
      
    >>> even_or_odd(10)
    '10 is Even!'
    
    >>> even_or_odd(5)
    '5 is Odd!'
    
    whenever a float is provided, then the closest integer is used:    
    >>> even_or_odd(3.2)
    '3 is Odd!'
    
    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'
    
    """
    #Define function to be tested
    if x % 2 == 0: # % is remainder function
        return "%d is Even!" % x # % here returns value as x - place holder %d better than just x as returns a string
    return "%d is Odd!" % x

###### Suppressed Block ######
# 
#  def largest_divisor_five(x=120):
#     """Find which is the largest divisor of x among 2,3,4,5."""
#     largest = 0
#     if x % 5 == 0:
#         largest = 5
#     elif x % 4 == 0:
#         largest = 4
#     elif x % 3 == 0: #shorterning of else if
#         largest = 3
#     elif x % 2 == 0:
#         largest = 2
#     else:
#         return "No divisor found for %d!" % x
#     return "The largest divisor of %d is %d" % (x,largest)

# def is_prime(x=70):
#     """Find whether an integer is prime."""
#     for i in range(2,x):
#         if x % i == 0:
#             print("%d is not a prime: %d is a divisor" % (x,i))

#             return False
#     print("%d is a prime" % x) # % x is the modular operator 
#     return True

# def find_all_primes(x=22):
#     """Find all the primes up to x"""
#     allprimes = []
#     for i in range(2, x+1):
#         if is_prime(i):
#             allprimes.append(i)
#     print("There are %d primes between 2 and %d" % (len(allprimes), x))
#     return allprimes

# def main(argv):
#     print(even_or_odd(22))
#     print(even_or_odd(33))
#     print(largest_divisor_five(120))
#     print(largest_divisor_five(121))
#     print(is_prime(60))
#     print(is_prime(59))
#     print(find_all_primes(100))
#     return 0

# if (__name__ == "__main__"):
#     status = main(sys.argv)
#     sys.exit(status)
###########################################

#runs embedded tests
doctest.testmod() # To run embedded tests**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.06708s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!